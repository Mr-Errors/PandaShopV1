#██████╗░░█████╗░███╗░░██╗██████╗░░█████╗░░██████╗██╗░░██╗░█████╗░██████╗░
#██╔══██╗██╔══██╗████╗░██║██╔══██╗██╔══██╗██╔════╝██║░░██║██╔══██╗██╔══██╗
#██████╔╝███████║██╔██╗██║██║░░██║███████║╚█████╗░███████║██║░░██║██████╔╝
#██╔═══╝░██╔══██║██║╚████║██║░░██║██╔══██║░╚═══██╗██╔══██║██║░░██║██╔═══╝░
#██║░░░░░██║░░██║██║░╚███║██████╔╝██║░░██║██████╔╝██║░░██║╚█████╔╝██║░░░░░
#╚═╝░░░░░╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝░╚════╝░╚═╝░░░░░
#|================================================|#
#|					INFORMATION					  |#
#|================================================|#
# Script Author: 
# - MrErrors
#
# Script Version: 
# - 1.0.1
#|================================================|#
#|					OPTIONS					      |#
#|================================================|#
#██╗███╗░░░███╗██████╗░░█████╗░██████╗░████████╗░██████╗#
#██║████╗░████║██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██╔════╝#
#██║██╔████╔██║██████╔╝██║░░██║██████╔╝░░░██║░░░╚█████╗░#
#██║██║╚██╔╝██║██╔═══╝░██║░░██║██╔══██╗░░░██║░░░░╚═══██╗#
#██║██║░╚═╝░██║██║░░░░░╚█████╔╝██║░░██║░░░██║░░░██████╔╝#
#╚═╝╚═╝░░░░░╚═╝╚═╝░░░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═════╝░#
#-------------------------------------------------------#
import:
    java.lang.Long
    java.io.File
    java.io.FileOutputStream
    java.net.URL
    java.nio.channels.Channels
    java.util.ArrayList
    java.util.List
    java.util.Set
    org.bukkit.Bukkit
    org.bukkit.inventory.ItemStack
    org.bukkit.Material
    org.bukkit.configuration.file.FileConfiguration
    org.bukkit.configuration.file.YamlConfiguration
    org.bukkit.configuration.MemorySection
    org.bukkit.event.inventory.InventoryDragEvent

#---------------------------------------------------------#
#██████╗░███████╗███████╗██╗░░░░░███████╗░█████╗░████████╗#
#██╔══██╗██╔════╝██╔════╝██║░░░░░██╔════╝██╔══██╗╚══██╔══╝#
#██████╔╝█████╗░░█████╗░░██║░░░░░█████╗░░██║░░╚═╝░░░██║░░░#
#██╔══██╗██╔══╝░░██╔══╝░░██║░░░░░██╔══╝░░██║░░██╗░░░██║░░░#
#██║░░██║███████╗██║░░░░░███████╗███████╗╚█████╔╝░░░██║░░░#
#╚═╝░░╚═╝╚══════╝╚═╝░░░░░╚══════╝╚══════╝░╚════╝░░░░╚═╝░░░#
#---------------------------------------------------------#
condition plugin %string% exists:
    check:
        if Bukkit.getPluginManager().getPlugin(expression-1) is set:
            continue

condition plugin %string% is (1¦enabled|2¦exists):
    check:
        if Bukkit.getPluginManager().isPluginEnabled(expression-1):
            if parse mark is 1:
                continue
        else:
            if parse mark is 2:
                continue 

effect download file from %string% and store it inside %string%:
  trigger:
    create section with arguments variables {_link}, {_file} stored in {_section}:
      set {_url} to new URL({_link})
      set {_file} to new File({_file})

      # create the path if it doesn't exist for some reason
      {_file}.getParentFile().mkdirs()
      {_file}.createNewFile()
      
      # download the file
      set {_readableByteChannel} to Channels.newChannel({_url}.openStream())
      set {_fileOutputStream} to new FileOutputStream({_file}) 
      set {_fileChannel} to {_fileOutputStream}.getChannel()
      {_fileChannel}.transferFrom({_readableByteChannel}, 0, Long.MAX_VALUE)

    run section {_section} async with arguments expr-1, expr-2 and wait

expression [get] all yaml nodes %string% from %string% [:with keys]:
    return type: objects
    get:
        set {_sender} to expr-3
        set {_getKeys} to true if parser tags contains "with keys", else false
        expr-2 is set:
            set {_file} to try new File(expr-2)
            if {_file}.exists():
                set {_con} to YamlConfiguration.loadConfiguration({_file})
                if expr-1 is set:
                    set {_node} to expr-1
                    if {_con}.contains({_node}):
                        return ...{_con}.getConfigurationSection({_node}).getKeys({_getKeys})
            else:
                send "The %expr-2% doesn't exist" to {_sender}
        if last java exception is set:
            send "&c%last java exception%" to {_sender}

#-----------------------------------------------------------------------#
#███████╗██╗░░░██╗███╗░░██╗░█████╗░████████╗██╗░█████╗░███╗░░██╗░██████╗#
#██╔════╝██║░░░██║████╗░██║██╔══██╗╚══██╔══╝██║██╔══██╗████╗░██║██╔════╝#
#█████╗░░██║░░░██║██╔██╗██║██║░░╚═╝░░░██║░░░██║██║░░██║██╔██╗██║╚█████╗░#
#██╔══╝░░██║░░░██║██║╚████║██║░░██╗░░░██║░░░██║██║░░██║██║╚████║░╚═══██╗#
#██║░░░░░╚██████╔╝██║░╚███║╚█████╔╝░░░██║░░░██║╚█████╔╝██║░╚███║██████╔╝#
#╚═╝░░░░░░╚═════╝░╚═╝░░╚══╝░╚════╝░░░░╚═╝░░░╚═╝░╚════╝░╚═╝░░╚══╝╚═════╝░#
#-----------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------------#
# this function is used for grabbing the number of rows that is used within each gui it self.
function RowsReturn(node: string, path: string) :: number:
    set {_n} to yaml value "%{_node}%" from "%{_path}%"
    return {_n}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return any text mainly used for titles/item names
function TextReturn(node: string, path: string) :: text:
    set {_t} to yaml value "%{_node}%" from "%{_path}%"
    set {_text} to coloured "%{_t}%"
    return {_text}


#---------------------------------------------------------------------------------------------------------------------#
# This function will return any the sound from en-lang.yml
function SoundReturn(sound: string, path: string) :: text:
    set {_e} to yaml value "%{_sound}%.Sound.Enabled" from "%{_path}%"
    if {_e} is true:
        set {_s} to yaml value "%{_sound}%.Sound.Value" from "%{_path}%"
    else:
        stop
    return {_s}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return any the text from en-lang.yml
function LangReturn(node: string, path: string) :: text:
    set {_e} to yaml value "%{_node}%.Message.Enabled" from "%{_path}%"
    if {_e} is true:
        set {_t} to yaml value "%{_node}%.Message.Value" from "%{_path}%"
        set {_text} to coloured "%{_t}%"
    else:
        stop
    return {_text}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return any the slot being used for the main items with-in the gui like Next/Back/Close/Return items
function MainItemReturnSlot(node: string, path: string) :: number:
    set {_e} to yaml value "%{_node}%.Enabled" from "%{_path}%"
    if {_e} is true:
        set {_n} to yaml value "%{_node}%.Slot" from "%{_path}%"
    else:
        stop
    return {_n}
#---------------------------------------------------------------------------------------------------------------------#
# This function will return any the text from en-lang.yml
function ShopAdminRetun(node: string, path: string, p: Player) :: text:
    set {_sound} to SoundReturn({_node},{_path})
    set {_e} to yaml value "%{_node}%.Message.Enabled" from "%{_path}%"
    if {_e} is true:
        set {_t} to yaml value "%{_node}%.Message.Value" from "%{_path}%"
        set {_text} to coloured "%{_t}%"
        send {_text} to {_p}
    if {_sound} is set:
        play sound "%{_sound}%" at volume 1 at pitch 2 to {_p}
    return {_text}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return any text mainly used for titles/item names
function TitleReturn(node: string, path: string, category: text, page: text) :: text:
    set {_t} to yaml value "%{_node}%" from "%{_path}%"
    replace "{category}" with "%{_category}%" in {_t}
    replace "Page-" with "" in {_page} and {_maxpage}
    replace "{page}" with "%{_page}%" in {_t}
    replace "{maxpage}" with "%size of {-shop::%{_category}%::*}%" in {_t}
    #broadcast "%{_page}% and %{_maxpage}%"
    set {_text} to coloured "%{_t}%"
    return {_text}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return any slot for the guis
function SlotReturn(node: string, path: string) :: number:
    set {_n} to yaml value "%{_node}%" from "%{_path}%"
    return {_n}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return the Language that is being used.
function LanguageReturn(node: string, path: string) :: text:
    set {_n} to yaml value "%{_node}%" from "%{_path}%"
    return {_n}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return the main items like back page/next page/close and return items.
function CategoryMainItems(node: string, path: string) :: item:
    set {_material} to yaml value "%{_node}%.Display-Item.Material" from "%{_path}%"
    set {_name} to yaml value "%{_node}%.Display-Item.Name" from "%{_path}%"
    set {_nbt} to yaml value "%{_node}%.Display-Item.NBT" from "%{_path}%"
    set {_lore::*} to yaml list "%{_node}%.Display-Item.Lore" from "%{_path}%"
    if {_material} is "player skull":
        if {_nbt} is set:
            set {_head} to getSkullFromTexture({_nbt})
            set {_n} to coloured {_name}
            set {_item} to {_head} named "%{_n}%"
            set lore of {_item} to coloured {_lore::*}
            return {_item}
    else:
        set {_mu} to "%{_material}%" in upper snake case
        set {_m} to Material.getMaterial({_mu})
        set {_mat} to new ItemStack({_m}, 1)
        set {_n} to coloured {_name}
        set {_item} to {_mat} named "%{_n}%"
        set lore of {_item} to coloured {_lore::*}
        return {_item}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return category that equals the inventory click from main gui
function CategoryReturn(click: number, node: string, path: string) :: text:
    set {_c::*} to all yaml nodes "%{_node}%" from "%{_path}%"
    loop {_c::*}:
        set {_slot} to yaml value "%{_node}%.%loop-value%.Display-Item.Slot" from "%{_path}%"
        if {_click} = {_slot}:
            set {_category} to loop-value
            stop loop
    return {_category}

#---------------------------------------------------------------------------------------------------------------------#
# This function will return any error that has happened when adding an item to the gui shop.
function ErrorReturn(node: string, path: string, category: text, item: text, page: text, file: string) :: text:
    set {_text} to yaml value "%{_node}%.Message.Value" from "%{_path}%"
    replace "{category}" with "%{_category}%" in {_text}
    replace "{page}" with "%{_page}%" in {_text}
    replace "{item}" with "%{_item}%" in {_text}
    replace "{file}" with "%{_file}%" in {_text}
    #send "test %{_text}%" to console
    set {_return} to coloured {_text}
    return {_return}
#---------------------------------------------------------------------------------------------------------------------#

# Do the /shop or what not formatting here
# Upon calling the category slots 
# set a variable {-shop} to the inventory
function registerShopMenu():
    set {_rows} to RowsReturn("Store-Menu.Rows", "plugins/PandaShop/Menu-Layout.yml")
    set {_title} to TextReturn("Store-Menu.Title", "plugins/PandaShop/Menu-Layout.yml")
    set {-shop} to chest inventory with {_rows} rows named "%{_title}%"
    set {_Filler::*} to all yaml nodes "Store-Menu.Filler" from "plugins/PandaShop/Menu-Layout.yml"
    set {_Shops::*} to all yaml nodes "Shops" from "plugins/PandaShop/Config.yml" 
    loop {_Filler::*}:
        set {_Slots_%loop-value%::*} to yaml list "Store-Menu.Filler.%loop-value%.slots" from "plugins/PandaShop/Menu-Layout.yml"
        set {_Material_%loop-value%} to yaml value "Store-Menu.Filler.%loop-value%.material" from "plugins/PandaShop/Menu-Layout.yml"
        set {_mu_%loop-value%} to "%{_Material_%loop-value%}%" in upper snake case
        set {_m_%loop-value%} to Material.getMaterial({_mu_%loop-value%})
        if {_Material_%loop-value%} is not "air":
            set {_item} to new ItemStack({_m_%loop-value%}, 1)
            set slot {_Slots_%loop-value%::*} of {-shop} to {_item} named "&6" with lore ""

    set {_exit-slot} to SlotReturn("Store-Menu.Exit-Slot", "plugins/PandaShop/Menu-Layout.yml")
    set {_exit-item} to CategoryMainItems("Store-Menu-Items.Exit-Menu", "plugins/PandaShop/Config.yml" )
    if {_exit-slot} is set:
        set slot {_exit-slot} of {-shop} to {_exit-item}

    loop {_Shops::*}:
        set {_material} to yaml value "Shops.%loop-value%.Display-Item.Material" from "plugins/PandaShop/Config.yml"
        set {_slot} to yaml value "Shops.%loop-value%.Display-Item.Slot" from "plugins/PandaShop/Config.yml"
        set {_name} to TextReturn("Shops.%loop-value%.Display-Item.Name","plugins/PandaShop/Config.yml")
        set {_nbt} to yaml value "Shops.%loop-value%.Display-Item.NBT" from "plugins/PandaShop/Config.yml"
        set {_shop-size} to yaml value "Shop-Category-Sizes.%loop-value%" from "plugins/PandaShop/Config.yml"
        if {_material} is "player skull":
            replace "{shop_size}" with "%{_shop-size}%" in {_name}
            set {_head} to getSkullFromTexture({_nbt})
            set {_lore::*} to yaml list "Shops.%loop-value%.Display-Item.Lore" from "plugins/PandaShop/Config.yml"
            set slot {_slot} of {-shop} to {_head} named "%{_name}%" with lore coloured {_lore::*}
        else:
            set {_mu} to "%{_material}%" in upper snake case
            set {_m} to Material.getMaterial({_mu})
            replace "{shop-size}" with "%{_shop-size}%" in {_name}
            set {_item} to new ItemStack({_m}, 1)
            set {_lore::*} to yaml list "Shops.%loop-value%.Display-Item.Lore" from "plugins/PandaShop/Config.yml"
            set slot {_slot} of {-shop} to {_item} named "%{_name}%" with lore coloured {_lore::*}

#---------------------------------------------------------------------------------------------------------------------#
# Loop all possible categories and upon doing so 
# loop their nodes and run them under registerShopCategoryPage(category, page)
# No variables should be set within this function
#Shop-Category.yml
function registerShopCategories():
    set {_Category::*} to all yaml nodes "Shop-Category" from "plugins/PandaShop/Shop-Category.yml"
    loop {_Category::*}:
        set {_Pages::*} to all yaml nodes "Shop-Category.%loop-value%" from "plugins/PandaShop/Shop-Category.yml"
        loop {_Pages::*}:
            registerShopCategoryPage(loop-value-1, loop-value-2)

#---------------------------------------------------------------------------------------------------------------------#
# Now that we have the category name and the category page name what's next?
# Retireving their values and formatting a function
# set a variable {-shop::CATEGORY::PAGE} to the inventory
function registerShopCategoryPage(category:string, page:string):
    set {_rows} to RowsReturn("Category-Menu.Rows", "plugins/PandaShop/Menu-Layout.yml")
    set {_title} to TitleReturn("Category-Menu.Title", "plugins/PandaShop/Menu-Layout.yml", {_category}, {_page})
    set {-shop::%{_category}%::%{_page}%} to chest inventory with {_rows} rows named "%{_title}%"
    set {_Item::*} to all yaml nodes "Shop-Category.%{_category}%.%{_page}%" from "plugins/PandaShop/Shop-Category.yml"
    set {_Filler::*} to all yaml nodes "Category-Menu.Filler" from "plugins/PandaShop/Menu-Layout.yml"
    loop {_Filler::*}:
        set {_Slots_%loop-value%::*} to yaml list "Category-Menu.Filler.%loop-value%.slots" from "plugins/PandaShop/Menu-Layout.yml"
        set {_Material_%loop-value%} to yaml value "Category-Menu.Filler.%loop-value%.material" from "plugins/PandaShop/Menu-Layout.yml"
        set {_Enabled_%loop-value%} to yaml value "Category-Menu.Filler.%loop-value%.enabled" from "plugins/PandaShop/Menu-Layout.yml"
        set {_mu_%loop-value%} to "%{_Material_%loop-value%}%" in upper snake case
        set {_m_%loop-value%} to Material.getMaterial({_mu_%loop-value%})
        if {_Enabled_%loop-value%} is true:
            set {_Fill_%loop-value%} to yaml value "Category-Menu.Filler.%loop-value%.fill" from "plugins/PandaShop/Menu-Layout.yml"
            if {_Fill_%loop-value%} is true:
                if {_Material_%loop-value%} is not "air":
                    set {_item} to new ItemStack({_m_%loop-value%}, 1)
                    set slot (integers from 0 to 53) of {-shop::%{_category}%::%{_page}%} to {_item} named "&6" with lore ""
            else:
                set {_item} to new ItemStack({_m_%loop-value%}, 1)
                set slot {_Slots_%loop-value%::*} of {-shop::%{_category}%::%{_page}%} to {_item} named "&6" with lore ""

    loop {_Item::*}:
        set {_material} to yaml value "Shop-Category.%{_category}%.%{_page}%.%loop-value%.material" from "plugins/PandaShop/Shop-Category.yml"
        set {_name} to yaml value "Shop-Category.%{_category}%.%{_page}%.%loop-value%.material" from "plugins/PandaShop/Shop-Category.yml"
        set {_slot} to yaml value "Shop-Category.%{_category}%.%{_page}%.%loop-value%.slot" from "plugins/PandaShop/Shop-Category.yml"
        set {_buy} to yaml value "Shop-Category.%{_category}%.%{_page}%.%loop-value%.buy" from "plugins/PandaShop/Shop-Category.yml"
        set {_sell} to yaml value "Shop-Category.%{_category}%.%{_page}%.%loop-value%.sell" from "plugins/PandaShop/Shop-Category.yml"

        set {_mu} to "%{_material}%" in upper snake case 
        set {_m} to Material.getMaterial({_mu})
        if {_m} is set:
            set {_i} to new ItemStack({_m}, 1)
            set {_item} to ShopItemMaterial({_i}, {_name}, {_buy}, {_sell})
            set slot {_slot} of {-shop::%{_category}%::%{_page}%} to {_item}
        else:
            loop all players:
                if loop-player has permission "pandashop.debug":
                    set {_error} to ErrorReturn("Error.Itemtype", "plugins/PandaShop/Language/%{-lang}%", {_category}, {_material}, {_page}, "plugins/PandaShop/Shop-Category.yml")
                    send {_error} to console
                    send {_error} to loop-player
                    set {_sound} to SoundReturn("Error.Itemtype", "plugins/PandaShop/Language/%{-lang}%")
                    if {_sound} is set:
                        play sound "%{_sound}%" at volume 1 at pitch 2 to loop-player

    set {_next-p} to CategoryMainItems("Store-Menu-Items.Next-Page", "plugins/PandaShop/Config.yml")
    set {_next-slot} to MainItemReturnSlot("Category-Menu.Next-Page","plugins/PandaShop/Menu-Layout.yml")
    if {_next-p} is set:
        set slot {_next-slot} of {-shop::%{_category}%::%{_page}%} to {_next-p}
    set {_back-p} to CategoryMainItems("Store-Menu-Items.Back-Page", "plugins/PandaShop/Config.yml")
    set {_back-slot} to MainItemReturnSlot("Category-Menu.Back-Page","plugins/PandaShop/Menu-Layout.yml")
    if {_back-p} is set:
        set slot {_back-slot} of {-shop::%{_category}%::%{_page}%} to {_back-p}

    set {_return-p} to CategoryMainItems("Store-Menu-Items.Return-Menu", "plugins/PandaShop/Config.yml")
    set {_return-slot} to MainItemReturnSlot("Category-Menu.Return-Store","plugins/PandaShop/Menu-Layout.yml")
    if {_return-p} is set:
        set slot {_return-slot} of {-shop::%{_category}%::%{_page}%} to {_return-p}

    set {_player-s} to CategoryMainItems("Store-Menu-Items.Player-Balance", "plugins/PandaShop/Config.yml")
    set {_player-slot} to MainItemReturnSlot("Category-Menu.Player-Stats","plugins/PandaShop/Menu-Layout.yml")
    if {_player-s} is set:
        set slot {_player-slot} of {-shop::%{_category}%::%{_page}%} to {_player-s}


#---------------------------------------------------------------------------------------------------------------------#
# This function is for used when grabbing a custom player head from minecraft-heads.com
function getSkullFromTexture(texture: string) :: item:
    # Creating NBT
    set {_n} to nbt compound of "{display:{Name:""{\""text\"":\""Corrupted Prototype\""}""},SkullOwner:{Id:[I;-225183921,-585806128,-1602835756,436492956],Properties:{textures:[{Value:""%{_texture}%""}]}}}"
    set {_skull} to player skull with nbt {_n}
    return {_skull}
#---------------------------------------------------------------------------------------------------------------------##
function ShopItemMaterial(material: item, ItemName: text, buy: number, sell: number) :: item:
    set {_name} to yaml value "Shop-Lore.Name" from "plugins/PandaShop/Config.yml"
    set {_lore::*} to yaml list "Shop-Lore.Lore" from "plugins/PandaShop/Config.yml"
    replace "{item}" with "%{_ItemName}%" in {_name}
    replace "{buy_price}" with "%{_buy}%" in {_lore::*}
    replace "{sell_price}" with "%{_sell}%" in {_lore::*}
    set {_name} to coloured {_name}
    set {_item} to {_material} named "%{_name}%"
    set lore of {_item} to coloured {_lore::*}
    return {_item}

#-----------------------------------------------------------------------#
#░█████╗░░█████╗░███╗░░░███╗███╗░░░███╗░█████╗░███╗░░██╗██████╗░░██████╗#
#██╔══██╗██╔══██╗████╗░████║████╗░████║██╔══██╗████╗░██║██╔══██╗██╔════╝#
#██║░░╚═╝██║░░██║██╔████╔██║██╔████╔██║███████║██╔██╗██║██║░░██║╚█████╗░#
#██║░░██╗██║░░██║██║╚██╔╝██║██║╚██╔╝██║██╔══██║██║╚████║██║░░██║░╚═══██╗#
#╚█████╔╝╚█████╔╝██║░╚═╝░██║██║░╚═╝░██║██║░░██║██║░╚███║██████╔╝██████╔╝#
#░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░╚═════╝░#
#-----------------------------------------------------------------------#
command /shop [<string>] [<string>]:
    executable by: players
    trigger:
        if arg-1 is set:
            if arg-2 is set:
                set {_sound} to SoundReturn("Shop.Main","plugins/PandaShop/Language/%{-lang}%")
                set {_text} to LangReturn("Shop.Main","plugins/PandaShop/Language/%{-lang}%")
                if {_text} is set:
                    send "%{_text}%" to player
                if {_sound} is set:
                    play sound "%{_sound}%" at volume 1 at pitch 2 to player
                open ({-shop::%arg-1%::%arg-2%}) ? {-shop} to player
            else:
                set {_text} to LangReturn("Shop.Page","plugins/PandaShop/Language/%{-lang}%")
                if {_text} is set:
                    send "%{_text}%" to player
        if arg-1 isn't set:
            open ({-shop::%arg-1%::%arg-2%}) ? {-shop} to player


command /shopa [<string>] [<string>]:
    aliases: /pandashopadmin, /psa, /shopadmin, /pandashopa
    trigger:
        if player has permission "pandashop.admin":
            if arg-1 is "reload":
                reload script "PandaShop.sk"
                ShopAdminRetun("Reload-Command", "plugins/PandaShop/Language/%{-lang}%", player)
            if arg-1 is "help":
                set {_sound} to SoundReturn("Help-Message","plugins/PandaShop/Language/%{-lang}%")
                set {_e} to yaml value "Help-Message.Message.Enabled" from "plugins/PandaShop/Language/%{-lang}%"
                if {_e} is true:
                    set {_t::*} to yaml list "Help-Message.Message.Value" from "plugins/PandaShop/Language/%{-lang}%"
                    send coloured {_t::*} to player
                if {_sound} is set:
                    play sound "%{_sound}%" at volume 1 at pitch 2 to player
            if arg-1 is "language":
                set {_lang::*} to "de-lang.yml", "en-lang.yml","es-lang.yml", "nl-lang.yml" and "ro-lang.yml"
                if {_lang::*} contains arg-2:
                    set {_l} to arg-2
                    set yaml value "Language" from "plugins/PandaShop/Config.yml" to {_l}
                    unload yaml "plugins/PandaShop/Language/%{-lang}%"
                    set {_at the top::*} to "██████╗░░█████╗░███╗░░██╗██████╗░░█████╗░░██████╗██╗░░██╗░█████╗░██████╗░####" and "██╔══██╗██╔══██╗████╗░██║██╔══██╗██╔══██╗██╔════╝██║░░██║██╔══██╗██╔══██╗####" and "██████╔╝███████║██╔██╗██║██║░░██║███████║╚█████╗░███████║██║░░██║██████╔╝####" and "██╔═══╝░██╔══██║██║╚████║██║░░██║██╔══██║░╚═══██╗██╔══██║██║░░██║██╔═══╝░####" and "██║░░░░░██║░░██║██║░╚███║██████╔╝██║░░██║██████╔╝██║░░██║╚█████╔╝██║░░░░░####" and "╚═╝░░░░░╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝░╚════╝░╚═╝░░░░░####" and "------------------------------------------------------------------------####" and "                             Author: MrErrors                           ####" and "                              Version: 1.0.1                            ####" and "------------------------------------------------------------------------####"
                    set the comments at the top of "plugins/PandaShop/Config.yml" to {_at the top::*}
                    save yaml "plugins/PandaShop/Config.yml"
                    set {-lang} to {_l}
                    load "plugins/PandaShop/Language/%{-lang}%" as "plugins/PandaShop/Language/%{-lang}%"
                    wait 2 tick
                    set {_sound} to SoundReturn("Language","plugins/PandaShop/Language/%{_l}%")
                    set {_e} to yaml value "Language.Message.Enabled" from "plugins/PandaShop/Language/%{_l}%"
                    if {_e} is true:
                        set {_t} to yaml value "Language.Message.Value" from "plugins/PandaShop/Language/%{_l}%"
                        set {_text} to coloured "%{_t}%"
                        replace "{lang}" with "%{_l}%" in {_text}
                        send {_text} to player
                    if {_sound} is set:
                        play sound "%{_sound}%" at volume 1 at pitch 2 to player
                else:
                    ShopAdminRetun("Language-Typo", "plugins/PandaShop/Language/%{-lang}%", player)
            if arg-1 isn't "language" or "help" or "reload":
                ShopAdminRetun("Error.Shop-Admin", "plugins/PandaShop/Language/%{-lang}%", player)
        else:
            ShopAdminRetun("No-Permissions", "plugins/PandaShop/Language/%{-lang}%", player)
#--------------------------------------------------------------------------------#
#██╗███╗░░██╗██╗░░░██╗███████╗███╗░░██╗████████╗░█████╗░██████╗░██╗░░░██╗░██████╗#
#██║████╗░██║██║░░░██║██╔════╝████╗░██║╚══██╔══╝██╔══██╗██╔══██╗╚██╗░██╔╝██╔════╝#
#██║██╔██╗██║╚██╗░██╔╝█████╗░░██╔██╗██║░░░██║░░░██║░░██║██████╔╝░╚████╔╝░╚█████╗░#
#██║██║╚████║░╚████╔╝░██╔══╝░░██║╚████║░░░██║░░░██║░░██║██╔══██╗░░╚██╔╝░░░╚═══██╗#
#██║██║░╚███║░░╚██╔╝░░███████╗██║░╚███║░░░██║░░░╚█████╔╝██║░░██║░░░██║░░░██████╔╝#
#╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚══════╝╚═╝░░╚══╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═════╝░#
#--------------------------------------------------------------------------------#
on InventoryDragEvent:
    if event.getInventory() is {-shop} of event.getWhoClicked():
        cancel event
on inventory click:
    if event-inventory = {-shop}:
        cancel event
        set {_click} to index of event-slot
        set {_category} to CategoryReturn({_click}, "Shops", "plugins/PandaShop/Config.yml")
        set {_sound} to SoundReturn("Shop.Main","plugins/PandaShop/Language/%{-lang}%")
        set {_text} to LangReturn("Shop.Main","plugins/PandaShop/Language/%{-lang}%")
        open {-shop::%{_category}%::Page-1} to player
        if {_text} is set:
            send "%{_text}%" to player
        if {_sound} is set:
            play sound "%{_sound}%" at volume 1 at pitch 2 to player

#-----------------------------------------------------------------------------------------------#
#████████╗░█████╗░██████╗░  ░█████╗░░█████╗░███╗░░░███╗██████╗░██╗░░░░░███████╗████████╗███████╗#
#╚══██╔══╝██╔══██╗██╔══██╗  ██╔══██╗██╔══██╗████╗░████║██╔══██╗██║░░░░░██╔════╝╚══██╔══╝██╔════╝#
#░░░██║░░░███████║██████╦╝  ██║░░╚═╝██║░░██║██╔████╔██║██████╔╝██║░░░░░█████╗░░░░░██║░░░█████╗░░#
#░░░██║░░░██╔══██║██╔══██╗  ██║░░██╗██║░░██║██║╚██╔╝██║██╔═══╝░██║░░░░░██╔══╝░░░░░██║░░░██╔══╝░░#
#░░░██║░░░██║░░██║██████╦╝  ╚█████╔╝╚█████╔╝██║░╚═╝░██║██║░░░░░███████╗███████╗░░░██║░░░███████╗#
#░░░╚═╝░░░╚═╝░░╚═╝╚═════╝░  ░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚═╝░░░░░╚══════╝╚══════╝░░░╚═╝░░░╚══════╝#
#-----------------------------------------------------------------------------------------------#
# Command wise it's basically just this
on tab complete for "shop":
    set tab completions of position 1 to indexes of {-shop::*}
    loop indexes of {-shop::*}:
        if tab arg-1 = loop-value:
            set tab completions of position 2 to indexes of {-shop::%loop-value%::*}

on tab complete for "shopa":
    if event-player has permission "pandashop.admin":
        set tab completions for position 1 to "reload", "help" and "language"
        if tab arg-1 is "language":
            set tab completions for position 2 to "de-lang.yml", "en-lang.yml","es-lang.yml", "nl-lang.yml" and "ro-lang.yml"

#-------------------------------------------------------------------------------------------------------------------------------#  
#░█████╗░░█████╗░███╗░░██╗███████╗██╗░██████╗░░░░░██╗██╗░░░██╗░█████╗░███╗░░░███╗██╗░░░░░░░░░██╗██╗░░░░░░█████╗░░█████╗░██████╗░#
#██╔══██╗██╔══██╗████╗░██║██╔════╝██║██╔════╝░░░░██╔╝╚██╗░██╔╝██╔══██╗████╗░████║██║░░░░░░░░██╔╝██║░░░░░██╔══██╗██╔══██╗██╔══██╗#
#██║░░╚═╝██║░░██║██╔██╗██║█████╗░░██║██║░░██╗░░░██╔╝░░╚████╔╝░███████║██╔████╔██║██║░░░░░░░██╔╝░██║░░░░░██║░░██║███████║██║░░██║#
#██║░░██╗██║░░██║██║╚████║██╔══╝░░██║██║░░╚██╗░██╔╝░░░░╚██╔╝░░██╔══██║██║╚██╔╝██║██║░░░░░░██╔╝░░██║░░░░░██║░░██║██╔══██║██║░░██║#
#╚█████╔╝╚█████╔╝██║░╚███║██║░░░░░██║╚██████╔╝██╔╝░░░░░░██║░░░██║░░██║██║░╚═╝░██║███████╗██╔╝░░░███████╗╚█████╔╝██║░░██║██████╔╝#
#░╚════╝░░╚════╝░╚═╝░░╚══╝╚═╝░░░░░╚═╝░╚═════╝░╚═╝░░░░░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░░░░╚═╝╚══════╝╚═╝░░░░╚══════╝░╚════╝░╚═╝░░╚═╝╚═════╝░#
#-------------------------------------------------------------------------------------------------------------------------------#
on script load:
    suppress the variable save warnings
    set {_at the top::*} to "██████╗░░█████╗░███╗░░██╗██████╗░░█████╗░░██████╗██╗░░██╗░█████╗░██████╗░####" and "██╔══██╗██╔══██╗████╗░██║██╔══██╗██╔══██╗██╔════╝██║░░██║██╔══██╗██╔══██╗####" and "██████╔╝███████║██╔██╗██║██║░░██║███████║╚█████╗░███████║██║░░██║██████╔╝####" and "██╔═══╝░██╔══██║██║╚████║██║░░██║██╔══██║░╚═══██╗██╔══██║██║░░██║██╔═══╝░####" and "██║░░░░░██║░░██║██║░╚███║██████╔╝██║░░██║██████╔╝██║░░██║╚█████╔╝██║░░░░░####" and "╚═╝░░░░░╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝░╚════╝░╚═╝░░░░░####" and "------------------------------------------------------------------------####" and "                             Author: MrErrors                           ####" and "                              Version: 1.0.1                            ####" and "------------------------------------------------------------------------####"
    if new File("plugins/PandaShop/Config.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Config.yml" and store it inside "plugins/PandaShop/Config.yml"
        wait 2 ticks
        load "plugins/PandaShop/Config.yml" as "plugins/PandaShop/Config.yml"
        set the comments at the top of "plugins/PandaShop/Config.yml" to {_at the top::*}
        save yaml "plugins/PandaShop/Config.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating config.yml file!" to console
    else:
        message "<##FFE100> &l● Shops &8&l➤ &7 Loading config.yml file!" to console
        load "plugins/PandaShop/Config.yml" as "plugins/PandaShop/Config.yml"
    if new File("plugins/PandaShop/Menu-Layout.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Menu-Layout.yml" and store it inside "plugins/PandaShop/Menu-Layout.yml"
        wait 2 ticks
        load "plugins/PandaShop/Menu-Layout.yml" as "plugins/PandaShop/Menu-Layout.yml"
        set the comments at the top of "plugins/PandaShop/Menu-Layout.yml" to {_at the top::*}
        save yaml "plugins/PandaShop/Menu-Layout.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating menu-layout.yml file!" to console
    else:
        message "<##FFE100> &l● Shops &8&l➤ &7 Loading menu-layout.yml file!" to console
        load "plugins/PandaShop/Menu-Layout.yml" as "plugins/PandaShop/Menu-Layout.yml"

    if new File("plugins/PandaShop/Shop-Category.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Shop-Category.yml" and store it inside "plugins/PandaShop/Shop-Category.yml"
        wait 2 ticks
        load "plugins/PandaShop/Shop-Category.yml" as "plugins/PandaShop/Shop-Category.yml"
        save yaml "plugins/PandaShop/Shop-Category.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating shop-category.yml file!" to console
    else:
        message "<##FFE100> &l● Shops &8&l➤ &7 Loading shop-category.yml file!" to console
        load "plugins/PandaShop/Shop-Category.yml" as "plugins/PandaShop/Shop-Category.yml"

    set {_top::*} to "if you would like to use color codes in you're messages use this format" and "<##HexCode> You will be able to find hex colors on https://g.co/kgs/VJg5aZ"

    if new File("plugins/PandaShop/Language/en-lang.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Language/en-lang.yml" and store it inside "plugins/PandaShop/Language/en-lang.yml"
        wait 2 ticks
        load "plugins/PandaShop/Language/en-lang.yml" as "plugins/PandaShop/Language/en-lang.yml"
        set the comments at the top of "plugins/PandaShop/Language/en-lang.yml" to {_at the top::*}
        #set the comments of yaml node "No-Permissions" from "plugins/PandaShop/Language/en-lang.yml" to {_top::*}
        save yaml "plugins/PandaShop/Language/en-lang.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating en-lang.yml file!" to console
        wait 1 tick
        unload yaml "plugins/PandaShop/Language/en-lang.yml"

    if new File("plugins/PandaShop/Language/es-lang.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Language/es-lang.yml" and store it inside "plugins/PandaShop/Language/es-lang.yml"
        wait 2 ticks
        load "plugins/PandaShop/Language/es-lang.yml" as "plugins/PandaShop/Language/es-lang.yml"
        set the comments at the top of "plugins/PandaShop/Language/es-lang.yml" to {_at the top::*}
        #set the comments of yaml node "No-Permissions" from "plugins/PandaShop/Language/es-lang.yml" to {_top::*}
        save yaml "plugins/PandaShop/Language/es-lang.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating es-lang.yml file!" to console
        wait 1 tick
        unload yaml "plugins/PandaShop/Language/es-lang.yml"

    if new File("plugins/PandaShop/Language/de-lang.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Language/de-lang.yml" and store it inside "plugins/PandaShop/Language/de-lang.yml"
        wait 2 ticks
        load "plugins/PandaShop/Language/de-lang.yml" as "plugins/PandaShop/Language/de-lang.yml"
        set the comments at the top of "plugins/PandaShop/Language/de-lang.yml" to {_at the top::*}
        #set the comments of yaml node "No-Permissions" from "plugins/PandaShop/Language/de-lang.yml" to {_top::*}
        save yaml "plugins/PandaShop/Language/de-lang.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating de-lang.yml file!" to console
        wait 1 tick
        unload yaml "plugins/PandaShop/Language/de-lang.yml"

    if new File("plugins/PandaShop/Language/nl-lang.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Language/nl-lang.yml" and store it inside "plugins/PandaShop/Language/nl-lang.yml"
        wait 2 ticks
        load "plugins/PandaShop/Language/nl-lang.yml" as "plugins/PandaShop/Language/nl-lang.yml"
        set the comments at the top of "plugins/PandaShop/Language/nl-lang.yml" to {_at the top::*}
        #set the comments of yaml node "No-Permissions" from "plugins/PandaShop/Language/nl-lang.yml" to {_top::*}
        save yaml "plugins/PandaShop/Language/nl-lang.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating nl-lang.yml file!" to console
        wait 1 tick
        unload yaml "plugins/PandaShop/Language/nl-lang.yml"

    if new File("plugins/PandaShop/Language/ro-lang.yml").exists() is false:
        download file from "https://raw.githubusercontent.com/Mr-Errors/PandaShop/main/PandaShop/Language/ro-lang.yml" and store it inside "plugins/PandaShop/Language/ro-lang.yml"
        wait 2 ticks
        load "plugins/PandaShop/Language/ro-lang.yml" as "plugins/PandaShop/Language/ro-lang.yml"
        set the comments at the top of "plugins/PandaShop/Language/ro-lang.yml" to {_at the top::*}
        #set the comments of yaml node "No-Permissions" from "plugins/PandaShop/Language/ro-lang.yml" to {_top::*}
        save yaml "plugins/PandaShop/Language/ro-lang.yml"
        message "<##FFE100> &l● Shops &8&l➤ &7 Creating ro-lang.yml file!" to console
        wait 1 tick
        unload yaml "plugins/PandaShop/Language/ro-lang.yml"

    set {-lang} to LanguageReturn("Language","plugins/PandaShop/Config.yml")
    if new File("plugins/PandaShop/Language/%{-lang}%").exists() is false:
        stop
    else:
        load "plugins/PandaShop/Language/%{-lang}%" as "plugins/PandaShop/Language/%{-lang}%"
        message "<##FFE100> &l● Shops &8&l➤ &7 Loading %{-lang}% file!" to console
    registerShopMenu()
    registerShopCategories()
